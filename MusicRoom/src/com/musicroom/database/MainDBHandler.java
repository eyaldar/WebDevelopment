package com.musicroom.database;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.musicroom.utils.JSONUtils;

public class MainDBHandler {
	private static Connection connection = null;

	public static void closeConnection() {
		if (connection != null) {
			try {
				connection.close();
				connection = null;
				System.out.println("Database connection terminated");
			} catch (Exception e) {
				System.err.println("Errors closing the DB connection");
			}
		}
	}

	public static Connection getConnection() {
		if (connection == null) {
			try {
				String userName = "root";
				String password = "";
				String url = "jdbc:mysql://localhost/";

				Class.forName("com.mysql.jdbc.Driver").newInstance();
				connection = DriverManager.getConnection(url, userName,
						password);

				System.out.println("Connected to database");

			} catch (Exception e) {
				System.err.println("Cannot connect to database server");
				System.err.println(e.getMessage());
			}

			try {
				Statement stmt = connection.createStatement();
				stmt.executeUpdate("USE musicRoomDB");

			} catch (Exception e) {
				System.err.println("Database doesn't exist!");
				System.err.println(e.getMessage());
			}
		}

		return (connection);
	}

	public static String getUserByLogin(JSONObject loginData)
			throws JSONException, Exception {
		String selectionString = "select * from USERS where USER_NAME = ? and PASSWORD = ?";
		JSONArray results = selectWithParameters(selectionString,
				loginData.getString("user_name"),
				loginData.getString("passwrod"));
		JSONObject result = JSONUtils.extractJSONObject(results);

		return result.toString();
	}

	public static int executeUpdateQuery(String sqlQuery) throws SQLException {

		Statement stmt = getConnection().createStatement();

		// Executed query
		int result = stmt.executeUpdate(sqlQuery);

		return result;
	}

	public static int executeUpdateWithParameters(String sqlQuery,
			Object... params) throws SQLException {
		PreparedStatement stmt = createPreparedStatement(sqlQuery, params);

		// Executed query
		int result = stmt.executeUpdate();

		return result;
	}

	public static JSONArray select(String sqlQuery) throws Exception {
		JSONArray result = new JSONArray();

		Statement stmt = getConnection().createStatement();

		// Executed query
		ResultSet rs = stmt.executeQuery(sqlQuery);

		result = JSONUtils.convertToJSON(rs);

		return result;
	}

	public static JSONArray selectWithParameters(String sqlQuery,
			Object... params) throws Exception {
		JSONArray result = new JSONArray();

		PreparedStatement stmt = createPreparedStatement(sqlQuery, params);

		// Executed query
		ResultSet rs = stmt.executeQuery();

		result = JSONUtils.convertToJSON(rs);

		return result;
	}

	public static ResultSet insertWithAutoKey(String sqlQuery,
			int autoGeneratedKeys, Object... params) throws SQLException {
		ResultSet rs = null;
		PreparedStatement stmt = createPreparedStatementWithKeys(sqlQuery,
				autoGeneratedKeys, params);

		// Executed query
		stmt.executeUpdate();
		
		// if wanted keys - get them
		if (autoGeneratedKeys == PreparedStatement.RETURN_GENERATED_KEYS)
			rs = stmt.getGeneratedKeys();

		return rs;
	}

	private static PreparedStatement createPreparedStatement(String query,
			Object... params) throws SQLException {
		return createPreparedStatementWithKeys(query,
				PreparedStatement.NO_GENERATED_KEYS, params);
	}

	private static PreparedStatement createPreparedStatementWithKeys(
			String query, int autoGeneratedKeys, Object... params)
			throws SQLException {
		PreparedStatement stmt = getConnection().prepareStatement(query,
				autoGeneratedKeys);

		for (int i = 0; i < params.length; i++) {
			stmt.setObject(i + 1, params[i]);
		}
		return stmt;
	}
}
